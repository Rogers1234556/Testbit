import fetch from 'node-fetch';
import { hasLevel } from '../utils/adminUtils.js';
import { Markup } from 'telegraf';

export default bot => {
  // –ü–æ —Ç–µ–∫—Å—Ç—É
  bot.hears('üìä –û–Ω–ª–∞–π–Ω', async ctx => {
    if (!(await hasLevel(ctx.from.id, 1))) return ctx.reply('üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.');
    sendOnline(ctx, false);
  });

  // –ü–æ –∫–Ω–æ–ø–∫–µ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
  bot.action('online', async ctx => {
    if (!(await hasLevel(ctx.from.id, 1))) return ctx.answerCbQuery('üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
    ctx.answerCbQuery();
    sendOnline(ctx, true); // true = edit message
  });

  // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  bot.action('refresh_online', async ctx => {
    if (!(await hasLevel(ctx.from.id, 1))) return ctx.answerCbQuery('üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
    ctx.answerCbQuery('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ');
    sendOnline(ctx, true); // –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  });

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
  async function sendOnline(ctx, edit = false) {
    try {
      const res = await fetch('http://launcher.hassle-games.com:3000/online.json');
      const data = await res.json();
      const crmp = data.crmp_new;

      let totalPlayers = 0;
      let lines = [];

      for (const [id, srv] of Object.entries(crmp)) {
        lines.push(`${id.padStart(2, '0')}`);
      }

      let text = `S | R ¬ª –û–Ω–ª–∞–π–Ω –ø—Ä–æ–µ–∫—Ç–∞ <a href="https://t.me/hassleonline"><b>"RADMIR CR:MP"</b></a>\n\n`;

      for (const [serverId, serverData] of Object.entries(crmp)) {
        const { players, bonus } = serverData;
        totalPlayers += players;

        const sid = serverId.toString().padStart(2, '0');
        text += `${sid}. "<a href="https://t.me/hassleonline">SERVER ${sid}</a> <b>[x${bonus}]</b>", –æ–Ω–ª–∞–π–Ω: <b>${players}</b>\n`;
      }

      text += `\n‚Äî –°—É–º–º–∞—Ä–Ω—ã–π –æ–Ω–ª–∞–π–Ω: <b>${totalPlayers}</b>`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback(' –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', 'refresh_online')]
      ]);

      if (edit) {
        await ctx.editMessageText(text, {
          parse_mode: 'HTML',
          disable_web_page_preview: true,
          reply_markup: keyboard.reply_markup
        });
      } else {
        await ctx.reply(text, {
          parse_mode: 'HTML',
          disable_web_page_preview: true,
          reply_markup: keyboard.reply_markup
        });
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω–∞:', err);
    }
  }
};
