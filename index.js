import { Telegraf } from 'telegraf';
import fetch from 'node-fetch';
import fs from 'fs/promises';
import dotenv from 'dotenv';
import express from 'express';
import sqlite3 from 'sqlite3';
import { open } from 'sqlite';
import { setupCheats } from './cheat.js'; // –±–µ–∑ require

dotenv.config();

const BOT_TOKEN = process.env.BOT_TOKEN || '–¢–í–û–ô_–¢–û–ö–ï–ù_–ó–î–ï–°–¨';
const bot = new Telegraf(BOT_TOKEN);

const ADMINS_FILE = './admins.json';

// ‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è Scalingo
const app = express();
const PORT = process.env.PORT || 3000;

app.get('/', (req, res) => {
  res.send('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ');
});

app.listen(PORT, () => {
  console.log(`üåê –°–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç ${PORT}`);
});

// –ó–∞–≥—Ä—É–∑–∫–∞ admins.jslon
async function loadAdmins() {
  try {
    const data = await fs.readFile(ADMINS_FILE, 'utf8');
    const json = JSON.parse(data);
    if (json && Array.isArray(json.admins)) return json;
    return { admins: [] };
  } catch {
    return { admins: [] };
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ admins.json
async function saveAdmins(data) {
  await fs.writeFile(ADMINS_FILE, JSON.stringify(data, null, 2));
}

// –ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getAdminLevel(userId) {
  const data = await loadAdmins();
  const admin = data.admins.find(a => a.id === userId);
  return admin ? admin.level : 0;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞
async function hasLevel(userId, level) {
  return (await getAdminLevel(userId)) >= level;
}

// –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞ (—É—Ä–æ–≤–µ–Ω—å 3 - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø)
async function addAdmin(id, level, nickname = '') {
  const data = await loadAdmins();
  if (data.admins.find(a => a.id === id)) return false;
  data.admins.push({ id, level, nickname });
  await saveAdmins(data);
  return true;
}

// –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è (—É—Ä–æ–≤–µ–Ω—å 1)
async function addZam(id, nickname) {
  const data = await loadAdmins();
  if (data.admins.find(a => a.id === id)) return false;
  data.admins.push({ id, level: 1, nickname });
  await saveAdmins(data);
  return true;
}

// –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ admins.json
async function delAdmin(id) {
  const data = await loadAdmins();
  const beforeLen = data.admins.length;
  data.admins = data.admins.filter(a => a.id !== id);
  if (data.admins.length === beforeLen) return false;
  await saveAdmins(data);
  return true;
}

// –ö–æ–º–∞–Ω–¥–∞: /accept ID - –≤—ã–¥–∞—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø (—É—Ä–æ–≤–µ–Ω—å 3)
bot.command('accept', async ctx => {
  if (!(await hasLevel(ctx.from.id, 3))) return ctx.reply('üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.');
  const args = ctx.message.text.split(' ');
  if (args.length < 2) return ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /accept ID');
  const userId = Number(args[1]);
  if (isNaN(userId)) return ctx.reply('ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.');
  const added = await addAdmin(userId, 3);
  ctx.reply(added ? `‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}` : '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø.');
});

// –ö–æ–º–∞–Ω–¥–∞: /addzam ID Nickname - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–∞ (—É—Ä–æ–≤–µ–Ω—å 1)
bot.command('addzam', async ctx => {
  if (!(await hasLevel(ctx.from.id, 3))) return ctx.reply('üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.');
  const args = ctx.message.text.split(' ');
  if (args.length < 3) return ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addzam ID Nickname');
  const userId = Number(args[1]);
  const nickname = args.slice(2).join(' ');
  if (isNaN(userId)) return ctx.reply('ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.');
  const added = await addZam(userId, nickname);
  ctx.reply(added ? `‚úÖ –ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å ${nickname} –¥–æ–±–∞–≤–ª–µ–Ω` : '‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.');
});

// –ö–æ–º–∞–Ω–¥–∞: /zam - —Å–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤ –∏ –∞–¥–º–∏–Ω–æ–≤ (—É—Ä–æ–≤–µ–Ω—å >=1)
bot.command('zam', async ctx => {
  if (!(await hasLevel(ctx.from.id, 1))) return ctx.reply('üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.');
  const data = await loadAdmins();
  if (data.admins.length === 0) return ctx.reply('–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.');
  let list = 'üë• <b>–°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª–µ–π –∏ –∞–¥–º–∏–Ω–æ–≤:</b>\n\n';
  data.admins.forEach(a => {
    list += `‚Ä¢ ID: <code>${a.id}</code> | –ù–∏–∫: ${a.nickname || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} | –£—Ä–æ–≤–µ–Ω—å: ${a.level}\n`;
  });
  ctx.replyWithHTML(list);
});

// –ö–æ–º–∞–Ω–¥–∞: /online - –≤—ã–≤–æ–¥ –æ–Ω–ª–∞–π–Ω (—É—Ä–æ–≤–µ–Ω—å >=1)

async function fetchOnlineData() {
  const res = await fetch('http://launcher.hassle-games.com:3000/online.json')
  return await res.json()
}

function generateOnlineText(crmp) {
  let total = 0
  let text = `S | R ¬ª –û–Ω–ª–∞–π–Ω –ø—Ä–æ–µ–∫—Ç–∞ "<a href="https://t.me/hassleonline"><b>RADMIR CR:MP</b></a>"\n\n`

  for (const [id, server] of Object.entries(crmp)) {
    const sid = id.toString().padStart(2, '0')
    const players = server.players || 0
    const bonus = server.bonus || 1
    total += players
    text += `${sid}. "<a href="https://t.me/hassleonline">SERVER ${sid}</a> <b>[x${bonus}]</b>", –æ–Ω–ª–∞–π–Ω: <b>${players}</b>\n`
  }

  text += `\n‚Äî –°—É–º–º–∞—Ä–Ω—ã–π –æ–Ω–ª–∞–π–Ω: <b>${total}</b>`
  return text
}
bot.command('online', async ctx => {
  if (!(await hasLevel(ctx.from.id, 1))) {
    return ctx.reply('üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.')
  }
  try {
    const data = await fetchOnlineData()
    const crmp = data.crmp_new
    const message = generateOnlineText(crmp)

    await ctx.reply(message, {
      parse_mode: 'HTML',
      disable_web_page_preview: true
    })
  } catch (e) {
    console.error(e)
    ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–Ω–ª–∞–π–Ω.')
  }
})

// –ö–æ–º–∞–Ω–¥–∞: /sobes - –∑–∞–≥–ª—É—à–∫–∞
bot.command('sobes', async ctx => {
  if (!(await hasLevel(ctx.from.id, 1))) {
    return ctx.reply('üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.');
  }

  ctx.reply('–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—à—ë–ª –ø–∏—Ç—å –ø–∏–≤–æ üç∫');
});

// –ö–æ–º–∞–Ω–¥–∞: /del ID - —Å–Ω—è—Ç—å –¥–æ—Å—Ç—É–ø (—É—Ä–æ–≤–µ–Ω—å 3)
bot.command('del', async ctx => {
  if (!(await hasLevel(ctx.from.id, 3))) return ctx.reply('üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.');
  const args = ctx.message.text.split(' ');
  if (args.length < 2) return ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /del ID');
  const userId = Number(args[1]);
  if (isNaN(userId)) return ctx.reply('ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.');
  const deleted = await delAdmin(userId);
  ctx.reply(deleted ? `‚úÖ –î–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —É–¥–∞–ª—ë–Ω.` : '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
});

// –ö–æ–º–∞–Ω–¥–∞: /update - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
bot.command('update', async ctx => {
  if (!(await hasLevel(ctx.from.id, 1))) {
    return ctx.reply('üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.');
  }

  const text = `
üì¶ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞</b>

<b>–ò–∑–º–µ–Ω–µ–Ω–∏—è 19.06 | 1.1 </b>
‚Ä¢ <code>/online</code> ‚Äî —É–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞ (>=1) –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
‚Ä¢ –ú–µ–ª–∫–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ —á–∏—Å—Ç–∫–∞ –∫–æ–¥–∞

<b>–ò–∑–º–µ–Ω–µ–Ω–∏—è 20.06 | 1.2 </b>
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ <code>/sub</code> –∏ <code>/unsub</code> –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç—Ä–∏–º–∞—Ö –ú–∞—Ä–∞—Å–∞ –®–∞–∫–∞–ª–∞
‚Ä¢ –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å–∏—Å—Ç–∏–º–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º
‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ <code>/online</code> –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–¥ –∫–æ–º–∞–Ω–¥—É <code>/admins</code> –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤ –Ω–∞ 19 SERVERE (—É—Ä–æ–≤–µ–Ω—å >=3) (BETA)

üí° –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª! –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Äî –ø–∏—à–∏ ‚úâÔ∏è <a href="https://t.me/Developer116">@Developer116</a>
  `;

  ctx.replyWithHTML(text, { disable_web_page_preview: true });
});

// üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã
let db;
(async () => {
  db = await open({
    filename: './stream_subscribers.db',
    driver: sqlite3.Database
  });

  await db.exec(`
    CREATE TABLE IF NOT EXISTS subscribers (
      user_id INTEGER PRIMARY KEY
    );
  `);
})();

// üì© –ü–æ–¥–ø–∏—Å–∫–∞
bot.command('sub', async ctx => {
  if (!(await hasLevel(ctx.from.id, 1))) {
    return ctx.reply('üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.');
  }

  try {
    await db.run('INSERT OR IGNORE INTO subscribers (user_id) VALUES (?)', [ctx.from.id]);
    ctx.reply('‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç—Ä–∏–º–∞—Ö –ú–∞—Ä–∞—Å–∞ –®–∞–∫–∏—Ä–∞!');
  } catch (err) {
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ.');
  }
});

// ‚ùå –û—Ç–ø–∏—Å–∫–∞
bot.command('unsub', async ctx => {
  if (!(await hasLevel(ctx.from.id, 1))) {
    return ctx.reply('üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.');
  }

  try {
    await db.run('DELETE FROM subscribers WHERE user_id = ?', [ctx.from.id]);
    ctx.reply('‚ùé –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.');
  } catch (err) {
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ.');
  }
});

// üîî –†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async function notifyAll(message) {
  const subscribers = await db.all('SELECT user_id FROM subscribers');
  for (const user of subscribers) {
    bot.telegram.sendMessage(user.user_id, message).catch(() => {});
  }
}

// üì∫ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∏–º–∞ (YouTube Data API –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ‚Äî –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
let lastStreamId = null;

async function checkLiveStream() {
  try {
    const res = await fetch('https://m.youtube.com/@MarasShakur/live');
    const html = await res.text();

    const videoIdMatch = html.match(/"videoId":"(.*?)"/);
    const isLive = html.includes('"isLiveNow":true');

    if (videoIdMatch && isLive) {
      const videoId = videoIdMatch[1];

      if (videoId !== lastStreamId) {
        lastStreamId = videoId;
        const url = `https://www.youtube.com/watch?v=${videoId}`;
        await notifyAll(`üî¥ –ú–∞—Ä–∞—Å –®–∞–∫–∏—Ä –∑–∞–ø—É—Å—Ç–∏–ª —Å—Ç—Ä–∏–º!\nüì∫ –°–º–æ—Ç—Ä–∏ —Ç—É—Ç: ${url}`);
        console.log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${url}`);
      }
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä–∏–º–∞:', err.message);
  }
}

// üîÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
setInterval(checkLiveStream, 2 * 60 * 1000);

bot.command('admins', async ctx => {
  if (!(await hasLevel(ctx.from.id, 1))) {
    return ctx.reply('üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.');
  }

  ctx.reply('–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ ‚öíÔ∏è');
});

setupCheats(bot, hasLevel);

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch()
  .then(() => console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω'))
  .catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
