import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { Markup } from 'telegraf';

// –≠–º—É–ª—è—Ü–∏—è __dirname –≤ ES-–º–æ–¥—É–ª–µ
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
const cheatDataPath = path.join(__dirname, 'cheats', 'data.json');
const cheatData = JSON.parse(fs.readFileSync(cheatDataPath, 'utf8'));

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
export function setupCheats(bot, hasLevel) {
  bot.command('cheats', async ctx => {
    if (!(await hasLevel(ctx.from.id, 1))) {
      return ctx.reply('üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.');
    }

    try {
      const buttons = cheatData.map(cheat =>
        [Markup.button.callback(cheat.name, `cheat_${cheat.id}`)]
      );

      await ctx.reply('üìÅ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª:', Markup.inlineKeyboard(buttons));
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /cheats:', err);
      ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–∫–∏
  bot.on('callback_query', async ctx => {
    const data = ctx.callbackQuery.data;
    if (!data.startsWith('cheat_') && !data.startsWith('download_')) return;

    if (data.startsWith('download_')) {
      const cheatId = data.replace('download_', '');
      const cheat = cheatData.find(c => c.id === cheatId);
      if (!cheat) return ctx.answerCbQuery('‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');

      const filePath = path.join(__dirname, 'cheats', 'files', cheat.file);
      if (!fs.existsSync(filePath)) {
        return ctx.reply('‚ùå –§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.');
      }

      const stats = fs.statSync(filePath);
      if (stats.size === 0) {
        return ctx.reply('‚ùå –§–∞–π–ª –ø—É—Å—Ç–æ–π.');
      }

      await ctx.replyWithDocument({ source: fs.createReadStream(filePath), filename: cheat.file });
      return ctx.answerCbQuery('üì¶ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
    }

    // –ö–ª–∏–∫ –ø–æ —á–∏—Ç—É
    const cheatId = data.replace('cheat_', '');
    const cheat = cheatData.find(c => c.id === cheatId);
    if (!cheat) return ctx.answerCbQuery('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ');

    const imagePath = path.join(__dirname, 'cheats', 'images', cheat.image);
    if (!fs.existsSync(imagePath)) {
      return ctx.reply('‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
    }

    const downloadBtn = Markup.inlineKeyboard([
      [Markup.button.callback('üì• –°–∫–∞—á–∞—Ç—å', `download_${cheat.id}`)]
    ]);

    await ctx.replyWithPhoto(
      { source: fs.createReadStream(imagePath) },
      {
        caption: `üìå <b>${cheat.name}</b>\n\n${cheat.description}`,
        parse_mode: 'HTML',
        reply_markup: downloadBtn.reply_markup
      }
    );

    ctx.answerCbQuery();
  });
}
